# Load in ECV 2022 and 2023 data and cast as data.table
df22 <- as.data.table(read_dta(file.path(datadir22,'ECV_2022_VAC_Menages_Mere_Enfants_VT_28052023.dta')))
df23 <- as.data.table(read_dta(file.path(datadir23,'ECV_2023_Vaccination_V4_Menages_Mere_Enfants_Dataset.dta')))
# Load in the codebook
cb      <- fread('codebook_bm.csv')
besd_cb <- fread('besd_codebook.csv')
# load in shapefile
pshp <- readRDS('province_shapefile.RDS')
## ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## DATA CLEANING
## rename variables according to codebook. keep only those merged from codebook
setnames(df22,cb$ecv2022,cb$name,skip_absent=TRUE)
setnames(df23,cb$ecv2023,cb$name,skip_absent=TRUE)
missing22 <- cb$name[which(!cb$name %in% names(df22))]
missing23 <- cb$name[which(!cb$name %in% names(df23))]
message(paste('Note! the following are in the codebook but not found in the data and will not be kept:
\n ECV2022:', paste0(missing22,collapse=','),'\n ECV2023:', paste0(missing23,collapse=',')))
df22 <- df22[,cb$name[!cb$name%in%missing22],with=FALSE]
df23 <- df23[,cb$name[!cb$name%in%missing23],with=FALSE]
# collapse them into one dataset
df22$svyyear <- 'ECV 2022'
df23$svyyear <- 'ECV 2023'
df <- rbind(df22,df23)
# Load in ECV 2022 and 2023 data and cast as data.table
df22 <- as.data.table(read_dta(file.path(datadir22,'ECV_2022_VAC_Menages_Mere_Enfants_VT_28052023.dta')))
df23 <- as.data.table(read_dta(file.path(datadir23,'ECV_2023_Vaccination_V4_Menages_Mere_Enfants_Dataset.dta')))
df22$BeSD21a
df223BeSD21a
df23BeSD21a
df23$BeSD21a
df23$BeSD19
df23$BeSD19a
df22$BeSD19a
df22$BeSD19a %>% mean
df23$BeSD19 %>% mean
df23$BeSD19b %>% mean
df23$BeSD19b
df22$BeSD19b
cbind(df23$BeSD19,df23$BeSD19b )
cbind(df22$BeSD19a,df22$BeSD19b )
table(df22$BeSD19a,df22$BeSD19b )
table(df23$BeSD19,df23$BeSD19b,useNA='always' )
table(df23$BeSD19,df23$BeSD19c,useNA='always' )
table(df23$BeSD21c,df23$BeSD21b )
table(df23$BeSD21c,df23$BeSD20 )
table(df23$BeSD21c,df23$BeSD20,useNA = 'always' )
# Load in the codebook
cb      <- fread('codebook_bm.csv')
besd_cb <- fread('besd_codebook.csv')
# load in shapefile
pshp <- readRDS('province_shapefile.RDS')
## ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## DATA CLEANING
## rename variables according to codebook. keep only those merged from codebook
setnames(df22,cb$ecv2022,cb$name,skip_absent=TRUE)
setnames(df23,cb$ecv2023,cb$name,skip_absent=TRUE)
missing22 <- cb$name[which(!cb$name %in% names(df22))]
missing23 <- cb$name[which(!cb$name %in% names(df23))]
message(paste('Note! the following are in the codebook but not found in the data and will not be kept:
\n ECV2022:', paste0(missing22,collapse=','),'\n ECV2023:', paste0(missing23,collapse=',')))
df22 <- df22[,cb$name[!cb$name%in%missing22],with=FALSE]
df23 <- df23[,cb$name[!cb$name%in%missing23],with=FALSE]
# collapse them into one dataset
df22$svyyear <- 'ECV 2022'
df23$svyyear <- 'ECV 2023'
df <- rbind(df22,df23)
##vaccine outcomes
# Binarize vaccination status
cols <- names(df) %>% str_subset("vacc_")
df <- df %>% mutate_at(cols, function(x) ifelse(x==2, 0, x))
# JAN 2025: Update definition to DPT0 and eight basic vaccines
## JAN 2025: Update definition to DPT0 and eight basic vaccines
## Make an alternative definition of UI based on a set of vx: (BCG+Polio x 3 + Penta x3 + MCV x 1).
df[, numcorevx := as.numeric(vacc_bcg    +  vacc_opv1    + vacc_opv2   +
vacc_opv3   +  vacc_penta1  + vacc_penta2 +
vacc_penta3 +  vacc_mcv1)]
# Load in ECV 2022 and 2023 data and cast as data.table
df22o <- as.data.table(read_dta(file.path(datadir22,'ECV_2022_VAC_Menages_Mere_Enfants_VT_28052023.dta')))
df23o <- as.data.table(read_dta(file.path(datadir23,'ECV_2023_Vaccination_V4_Menages_Mere_Enfants_Dataset.dta')))
# active copy for analysis (to avoid long load times in interactive coding)
df22 <- copy(df22o)
df23 <- copy(df23o)
# Load in the codebook
cb      <- fread('codebook_bm.csv')
besd_cb <- fread('besd_codebook.csv')
# load in shapefile
pshp <- readRDS('province_shapefile.RDS')
## ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## DATA CLEANING
## rename variables according to codebook. keep only those merged from codebook
setnames(df22,cb$ecv2022,cb$name,skip_absent=TRUE)
setnames(df23,cb$ecv2023,cb$name,skip_absent=TRUE)
missing22 <- cb$name[which(!cb$name %in% names(df22))]
missing23 <- cb$name[which(!cb$name %in% names(df23))]
message(paste('Note! the following are in the codebook but not found in the data and will not be kept:
\n ECV2022:', paste0(missing22,collapse=','),'\n ECV2023:', paste0(missing23,collapse=',')))
df22 <- df22[,cb$name[!cb$name%in%missing22],with=FALSE]
df23 <- df23[,cb$name[!cb$name%in%missing23],with=FALSE]
# collapse them into one dataset
df22$svyyear <- 'ECV 2022'
df23$svyyear <- 'ECV 2023'
df <- rbind(df22,df23)
##vaccine outcomes
# Binarize vaccination status
cols <- names(df) %>% str_subset("vacc_")
df <- df %>% mutate_at(cols, function(x) ifelse(x==2, 0, x))
## ORIGINAL WAY WE DEFINED OUTCOMES
# Zero-dose (Gavi definition of penta1==0)
df[, zd_orig := case_when(vacc_penta1==0~1,
vacc_penta1==1~0)]
# Under-immunized (MCV1==0 & penta1==1)
df[, ui_orig := as.numeric(vacc_penta1==1&(vacc_mcv1==0|vacc_penta3==0))]
# Vaccination status variable
df[, vxstatus_orig := 'Complete']
df[ui_orig==1, vxstatus_orig := 'Under-Immunized']
df[zd_orig==1, vxstatus_orig := 'Zero-Dose']
df[, fvxstatus_orig := factor(vxstatus_orig, levels=c('Zero-Dose','Under-Immunized','Complete'))]
## JAN 2025: Update definition to DPT0 and eight basic vaccines
## Make an alternative definition of UI based on a set of vx: (BCG+Polio x 3 + Penta x3 + MCV x 1).
df[, numcorevx := as.numeric(vacc_bcg    +  vacc_opv1    + vacc_opv2   +
vacc_opv3   +  vacc_penta1  + vacc_penta2 +
vacc_penta3 +  vacc_mcv1)]
# active copy for analysis (to avoid long load times in interactive coding)
df22 <- copy(df22o)
df23 <- copy(df23o)
# Load in the codebook
cb      <- fread('codebook_bm.csv')
besd_cb <- fread('besd_codebook.csv')
# load in shapefile
pshp <- readRDS('province_shapefile.RDS')
## ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## DATA CLEANING
## rename variables according to codebook. keep only those merged from codebook
setnames(df22,cb$ecv2022,cb$name,skip_absent=TRUE)
# active copy for analysis (to avoid long load times in interactive coding)
df22 <- copy(df22o)
df23 <- copy(df23o)
# Load in the codebook
cb      <- fread('codebook_bm.csv')
besd_cb <- fread('besd_codebook.csv')
# load in shapefile
pshp <- readRDS('province_shapefile.RDS')
## ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## DATA CLEANING
## rename variables according to codebook. keep only those merged from codebook
setnames(df22,cb$ecv2022,cb$name,skip_absent=TRUE)
setnames(df23,cb$ecv2023,cb$name,skip_absent=TRUE)
missing22 <- cb$name[which(!cb$name %in% names(df22))]
missing23 <- cb$name[which(!cb$name %in% names(df23))]
message(paste('Note! the following are in the codebook but not found in the data and will not be kept:
\n ECV2022:', paste0(missing22,collapse=','),'\n ECV2023:', paste0(missing23,collapse=',')))
df22 <- df22[,cb$name[!cb$name%in%missing22],with=FALSE]
df23 <- df23[,cb$name[!cb$name%in%missing23],with=FALSE]
# collapse them into one dataset
df22$svyyear <- 'ECV 2022'
df23$svyyear <- 'ECV 2023'
df <- rbind(df22,df23)
##vaccine outcomes
# Binarize vaccination status
cols <- names(df) %>% str_subset("vacc_")
df <- df %>% mutate_at(cols, function(x) ifelse(x==2, 0, x))
## ORIGINAL WAY WE DEFINED OUTCOMES
# Zero-dose (Gavi definition of penta1==0)
df[, zd_orig := case_when(vacc_penta1==0~1,
vacc_penta1==1~0)]
# Under-immunized (MCV1==0 & penta1==1)
df[, ui_orig := as.numeric(vacc_penta1==1&(vacc_mcv1==0|vacc_penta3==0))]
# Vaccination status variable
df[, vxstatus_orig := 'Complete']
df[ui_orig==1, vxstatus_orig := 'Under-Immunized']
df[zd_orig==1, vxstatus_orig := 'Zero-Dose']
df[, fvxstatus_orig := factor(vxstatus_orig, levels=c('Zero-Dose','Under-Immunized','Complete'))]
## JAN 2025: Update definition to DPT0 and eight basic vaccines
## Make an alternative definition of UI based on a set of vx: (BCG+Polio x 3 + Penta x3 + MCV x 1).
df[, numcorevx := as.numeric(vacc_bcg    +  vacc_opv1   + vacc_opv2   +
vacc_opv3   +  vacc_penta1 + vacc_penta2 +
vacc_penta3 +  vacc_mcv1)]
# active copy for analysis (to avoid long load times in interactive coding)
df22 <- copy(df22o)
df23 <- copy(df23o)
# Load in the codebook
cb      <- fread('codebook_bm.csv')
besd_cb <- fread('besd_codebook.csv')
# load in shapefile
pshp <- readRDS('province_shapefile.RDS')
## ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## DATA CLEANING
## rename variables according to codebook. keep only those merged from codebook
setnames(df22,cb$ecv2022,cb$name,skip_absent=TRUE)
setnames(df23,cb$ecv2023,cb$name,skip_absent=TRUE)
missing22 <- cb$name[which(!cb$name %in% names(df22))]
missing23 <- cb$name[which(!cb$name %in% names(df23))]
message(paste('Note! the following are in the codebook but not found in the data and will not be kept:
\n ECV2022:', paste0(missing22,collapse=','),'\n ECV2023:', paste0(missing23,collapse=',')))
df22 <- df22[,cb$name[!cb$name%in%missing22],with=FALSE]
df23 <- df23[,cb$name[!cb$name%in%missing23],with=FALSE]
# collapse them into one dataset
df22$svyyear <- 'ECV 2022'
df23$svyyear <- 'ECV 2023'
df <- rbind(df22,df23)
##vaccine outcomes
# Binarize vaccination status
cols <- names(df) %>% str_subset("vacc_")
df <- df %>% mutate_at(cols, function(x) ifelse(x==2, 0, x))
## ORIGINAL WAY WE DEFINED OUTCOMES
# Zero-dose (Gavi definition of penta1==0)
df[, zd_orig := case_when(vacc_penta1==0~1,
vacc_penta1==1~0)]
# Under-immunized (MCV1==0 & penta1==1)
df[, ui_orig := as.numeric(vacc_penta1==1&(vacc_mcv1==0|vacc_penta3==0))]
# Vaccination status variable
df[, vxstatus_orig := 'Complete']
df[ui_orig==1, vxstatus_orig := 'Under-Immunized']
df[zd_orig==1, vxstatus_orig := 'Zero-Dose']
df[, fvxstatus_orig := factor(vxstatus_orig, levels=c('Zero-Dose','Under-Immunized','Complete'))]
## JAN 2025: Update definition to DPT0 and eight basic vaccines
## Make an alternative definition of UI based on a set of vx: (BCG+Polio x 3 + Penta x3 + MCV x 1).
df[, numcorevx := as.numeric(vacc_bcg    +  vacc_opv1   + vacc_opv2   +
vacc_opv3   +  vacc_penta1 + vacc_penta2 +
vacc_penta3 +  vacc_mcv1)]
df[, zd_hard := as.numeric(numcorevx == 0)] # hard definition (True ZD)
df[, zd := zd_orig] # Using the penta0 definition of ZD
df[, ui  := as.numeric(numcorevx > 0 & numcorevx < 8)]
# this is the outcome variable we will use
df[, vxstatus := 'Complete']
df[ui==1, vxstatus := 'Under-Immunized']
df[zd==1, vxstatus := 'Zero-Dose']
df[, fvxstatus := factor(vxstatus, levels=c('Zero-Dose','Under-Immunized','Complete'))]
table(df$fvxstatus)
table(df$fvxstatus)/nrow(df)
table(df$numcorevx)/nrow(df)
table(df[c_age_m>=12]$numcorevx)/nrow(df[c_age_m>=12])
# id variable
df[, id := .I]
# haven_labelled variables to factors using their haven labels, starting with education_level_hhlead
labelledvars <- c('strate', 'sex_hhlead', 'etat_civil_hhlead', 'education_level_hhlead','religion_hhlead',
'ethnie_hhlead','etat_civil_caregiver','age_caregiver','education_level_caregiver',
'religion_caregiver','wealth_quintile')
for(v in labelledvars) df[[v]] <- as_factor(df[[v]])
# script to load libraries, bespoke functions, and plot setup
source('./besd_utils.R')
clusterfunc
## THINKING-FEELING
tf_vars <- cb[besd_category=='thinkingfeeling' & zd_relevant==1]$name
# initiate a codebook of all variable levels used
codebookclust <- data.table()
tf_vars
tf_cl <- clusterfunc(data=df,vars=tf_vars, k = 3, prefix='thinkingfeeling',method='lca')
tf_cl$plot
# !! NOTE! These orderings can change if data or seed changes. Review output plot of clusterfunc each time
tf_labs <- c('2. Moderate Thinking/Feeling', '1. Positive Thinking/Feeling','3. Negative Thinking/Feeling')
for(i in 1:length(tf_labs)) tf_cl$cl[thinkingfeeling_cluster==i,thinkingfeeling_cllab:=tf_labs[i]]
vxstatclusterplot(clusters=tf_cl$cl)
## SOCIAL PROCESSES
sp_vars <- cb[besd_category=='socialprocesses' & zd_relevant==1]$name
sp_cl <- clusterfunc(data=df, vars=sp_vars, k = 3, prefix='socialprocesses',method='lca')
# !!NOTE!
sp_labs <- c('3. Negative Norms', '1. Positive Norms','2. Positive Norms with low autonomy')
for(i in 1:length(sp_labs)) sp_cl$cl[socialprocesses_cluster==i,socialprocesses_cllab:=sp_labs[i]]
vxstatclusterplot(clusters=sp_cl$cl) # may just need 2 categories here
## MOTIVATION (just one var)
m_vars <- cb[besd_category=='motivation' & zd_relevant==1]$name
m_cl <- clusterfunc(data=df, vars=m_vars, k = 2, prefix='motivation',method='lca')
# !!NOTE!
m_labs <- c('1. Motivated', '2. Unmotivated or unsure')
for(i in 1:length(m_labs)) m_cl$cl[motivation_cluster==i,motivation_cllab:=m_labs[i]]
vxstatclusterplot(clusters=m_cl$cl)
pi_vars <- cb[besd_category=='practicalissues' & zd_relevant==1]$name
pi_vars
pi_cl <- clusterfunc(data=df, vars=pi_vars, k = 2, prefix='practicalissues',method='lca')
pi_labs <- c('1. Fewer Practical Issues', '2. More Practical Issues')
for(i in 1:length(pi_labs)) pi_cl$cl[practicalissues_cluster==i,practicalissues_cllab:=pi_labs[i]]
vxstatclusterplot(clusters=pi_cl$cl)
# add these to df
df <- merge(df,tf_cl$cl)
df <- merge(df,sp_cl$cl)
df <- merge(df,m_cl$cl)
df <- merge(df,pi_cl$cl)
# likelihood ratio tests to compare models (get pval)
lrt <- function(mod1, mod2){
pchisq(-2 * (mod1$llik - mod2$llik),
mod2$npar - mod1$npar,
lower.tail = FALSE)
}
entropyfunc <- function(model){
if(is.null(model)){
return(NA)
} else {
posterior_probs <- model$posterior
entropy_individual <- function(p) { p <- p[p > 0]; -sum(p * log(p)) }
entropy <- mean(apply(posterior_probs, 1, entropy_individual))
return(entropy)
}
}
# extract goodness of fit stats (AIC, BIC, G^2, X^2) for each from the $model object
grabfitstats <- function(modlist,ks,domainname){
message(domainname)
out <-
data.table(
domain  = domainname,
k       = ks,
loglik  = unlist(lapply(modlist[ks],  function(x) x$model$llik)),
AIC     = unlist(lapply(modlist[ks],  function(x) x$model$aic)),
BIC     = unlist(lapply(modlist[ks],  function(x) x$model$bic)),
G2      = unlist(lapply(modlist[ks],  function(x) x$model$Gsq)),
X2      = unlist(lapply(modlist[ks],  function(x) x$model$Chisq)),
entropy = lapply(lapply(modlist[ks],  function(x) x$model),entropyfunc),
npar    = unlist(lapply(modlist[ks],  function(x) x$model$npar))
)
}
# run the models
tflcalist <- splcalist <- mlcalist <- pilcalist <- list()
for(k in 2:6){
message(k)
tflcalist[[k]] <- clusterfunc(data=df,vars=tf_vars, k = k, prefix='thinkingfeeling',method='lca',printplot=FALSE)
splcalist[[k]] <- clusterfunc(data=df,vars=sp_vars, k = k, prefix='socialprocesses',method='lca',printplot=FALSE)
if(k<4) mlcalist[[k]]  <- clusterfunc(data=df,vars=m_vars, k = k, prefix='motivation',method='lca',printplot=FALSE)
pilcalist[[k]] <- clusterfunc(data=df,vars=pi_vars, k = k, prefix='practicalissues',method='lca',printplot=FALSE)
}
# extract goodness of fit stats (AIC, BIC, G^2, X^2) for each from the $model object
grabfitstats <- function(modlist,ks,domainname){
message(domainname)
out <-
data.table(
domain  = domainname,
k       = ks,
loglik  = unlist(lapply(modlist[ks],  function(x) x$model$llik)),
AIC     = unlist(lapply(modlist[ks],  function(x) x$model$aic)),
BIC     = unlist(lapply(modlist[ks],  function(x) x$model$bic)),
G2      = unlist(lapply(modlist[ks],  function(x) x$model$Gsq)),
X2      = unlist(lapply(modlist[ks],  function(x) x$model$Chisq)),
entropy = lapply(lapply(modlist[ks],  function(x) x$model),entropyfunc),
npar    = unlist(lapply(modlist[ks],  function(x) x$model$npar))
)
for(K in ks[2]:ks[length(ks)]){ # llik ratio test
out[k==K, lrt_pval := lrt(modlist[[K-1]]$model,modlist[[K]]$model)]
}
return(out)
}
tflcalist <- splcalist <- mlcalist <- pilcalist <- list()
for(k in 2:6){
message(k)
tflcalist[[k]] <- clusterfunc(data=df,vars=tf_vars, k = k, prefix='thinkingfeeling',method='lca',printplot=FALSE)
splcalist[[k]] <- clusterfunc(data=df,vars=sp_vars, k = k, prefix='socialprocesses',method='lca',printplot=FALSE)
if(k<4) mlcalist[[k]]  <- clusterfunc(data=df,vars=m_vars, k = k, prefix='motivation',method='lca',printplot=FALSE)
pilcalist[[k]] <- clusterfunc(data=df,vars=pi_vars, k = k, prefix='practicalissues',method='lca',printplot=FALSE)
}
# make a table across all indicators
fitstats <- rbindlist(
list(grabfitstats(tflcalist,2:6,'Thinking/Feeling'),
grabfitstats(splcalist,2:6,'Social Processes'),
grabfitstats(mlcalist,2:3,'Motivation'),
grabfitstats(pilcalist,2:6,'Practical Issues'))
)
fitstats
fwrite(fitstats,'fitstats.csv')
df
df$motivation_cluster  <-    df$motivation_cllab  <- NULL
# !!NOTE!
m_labs <- c('1. Higher motivation', '2. Lower motivation')
for(i in 1:length(m_labs)) m_cl$cl[motivation_cluster==i,motivation_cllab:=m_labs[i]]
vxstatclusterplot(clusters=m_cl$cl)
df <- merge(df,m_cl$cl)
demdistplot
# set up as factors with hypothesized 'worser' levels higher up (will be >1 OR in regression)
demvarsreg <-
c('strate', 'sex_hhlead', 'ethnie_hhlead','etat_civil_caregiver',
'age_caregiver_grp','education_level_caregiver',
'religion_caregiver','wealth_quintile','occupation_hhlead')
# relabel factors
# relabel factors
label(df$strate) <- 'Setting'
levels(df$strate) <- c('Urban','Rural')
levels(df$sex_hhlead) <- c('male','female')
label(df$sex_hhlead)  <- 'Sex of HH Head'
label(df$ethnie_hhlead) <- 'Ethnicity of HH Head'
label(df$etat_civil_caregiver)  <- 'Marital Status of Caregiver'
levels(df$etat_civil_caregiver) <- c('Married','Common-law','Separated','Single','Divorced','Widowed')
df$etat_civil_caregiver <- relevel(df$etat_civil_caregiver, ref = "Married")
label(df$age_caregiver_grp) <- 'Age of Caregiver'
label(df$education_level_caregiver) <- 'Education Level of Caregiver'
levels(df$education_level_caregiver) <- c('Never been to school','Primary','Secondary',
'Higher','Do not know','No response')
## Demographic variable plot
demdistplot <- function(dv, weighted = TRUE) {
message(paste(dv,'----------'))
tmp <- copy(df)
if(dv=='age_caregiver_grp')
tmp <- tmp[as.numeric(as.character(age_caregiver)) < 46]
if(weighted==FALSE) tmp$weight <- 1
tmp <- tmp[,.(N=sum(weight)),by=c(dv,cllabvars)]
tmp <- melt(tmp, id.vars=c(dv,'N'), variable.name = 'besd_category', value.name = 'value_label')
tmp <- tmp[, NN := sum(N), by = c(dv,'besd_category')]
tmp[, pct := N/NN]
tmp[, dv := get(dv)]
tmp[, besd_category := gsub('_cllab','',besd_category)]
tmp <- merge(tmp, unique(besd_cbl[,c('besd_category','besd_category_nice')]), by='besd_category')
plotlist <- list()
for(c in 1:4){
cat <- c("Thinking/Feeling","Social Processes","Motivation" , "Practical Issues")[c]
message(cat)
tmpp <- tmp[besd_category_nice==cat]
nvals <- length(unique(tmpp$value_label))
CLZ <- c('#F9DBBA','#5B99C2','#1A4870')
if(nvals==2) CLZ <- CLZ[c(1,3)]
plotlist[[c]] <-
ggplot(tmpp) +
geom_bar(aes(pct,dv,fill=value_label),position='stack',stat='identity') +
ggtitle(cat) +
theme(axis.text.y=element_text(angle=0,hjust=1),
legend.position='top')+
scale_x_continuous(labels=scales::percent, name = '') +
scale_fill_manual(values=rev(CLZ), name='') + ylab('') +
guides(fill = guide_legend(ncol = 1))
}
plotlist[[5]] <-
ggplot(tmpp) +
geom_bar(aes(dv,N),fill='darkgrey',stat='identity') +
theme(axis.text.y=element_blank(),
axis.line.y =element_blank(),
axis.ticks.y=element_blank(),
legend.position='right')+
ggtitle(dv) +
scale_fill_manual(values=CLZ, name='') + xlab('') + ylab('')
# patchwork plot them
layout <- plotlist[[5]] /
(plotlist[[1]]+plotlist[[2]]) /
(plotlist[[3]]+plotlist[[4]])
plot_layout(heights = c(0.3, 1, 1))
# Display the combined plot
return(layout)
}
# make age of caregiver into a group of 5 year bands, as a factor
df[, age_caregiver_grp := cut(as.numeric(as.character(age_caregiver)),
breaks = seq(15, 65, by = 5),
labels = c('18-20','21-25','26-30','31-35','36-40','41-45','46-50','51-55','56-60','60+'))]
df[as.numeric(as.character(age_caregiver))>50, age_caregiver_grp := '> 50']
df[as.numeric(as.character(age_caregiver))<18, age_caregiver_grp := '< 18']
df[, age_caregiver_grp := factor(age_caregiver_grp, levels=rev(c('< 18','18-20','21-25','26-30','31-35','36-40',
'41-45','46-50','> 50')))]
label(df$age_caregiver_grp) <- 'Age of Caregiver'
label(df$education_level_caregiver) <- 'Education Level of Caregiver'
levels(df$education_level_caregiver) <- c('Never been to school','Primary','Secondary',
'Higher','Do not know','No response')
df$education_level_caregiver <- relevel(df$education_level_caregiver, ref = "Higher")
label(df$religion_caregiver) <- 'Religion of Caregiver'
levels(df$religion_caregiver) <- c('No religion','Catholic','Protestant',
'Kimbanguist','Muslim','Revival/Independent Church',
'Other','Dont know','No response ')
df$religion_caregiver <- relevel(df$religion_caregiver, ref = "Catholic")
label(df$wealth_quintile) <- 'Wealth Quintile'
levels(df$wealth_quintile) <- c('Poorest','Poorer','Middle','Richer','Richest')
# order all levels richest to poorest
df$wealth_quintile <- fct_relevel(df$wealth_quintile, 'Richest','Richer','Middle','Poorer','Poorest')
label(df$thinkingfeeling_cllab) <- 'Thinking/Feeling'
label(df$socialprocesses_cllab) <- 'Social Processes'
label(df$motivation_cllab) <- 'Motivation'
label(df$practicalissues_cllab) <- 'Practical Issues'
label(df$province) <- 'Province'
label(df$age_caregiver_grp) <- 'Age of Caregiver'
df$occupation_hhlead <- as.factor(df$occupation_hhlead)
label(df$occupation_hhlead) <- 'Occupation of HH Head'
levels(df$occupation_hhlead) <- c('Without profession','Teacher','Civil servant','Farmer/herder',
'Fisherman','Trader','Laborer','Other Profession','Student')
demvars <-
c('strate', 'sex_hhlead', 'etat_civil_hhlead', 'education_level_hhlead','religion_hhlead',
'ethnie_hhlead','etat_civil_caregiver','age_caregiver_grp','education_level_caregiver',
'religion_caregiver','wealth_quintile','occupation_hhlead')
pdf('figure SI -- LCA and demographics.pdf',width=15,height=17)
for(dvv in demvars) plot(demdistplot(dvv))
dev.off()
# extract r-squared
calculate_r2 <- function(modobj) {
# Check the family of the model
family_type <- family(modobj)$family
# Calculate log-likelihood of the full model
logLik_full <- logLik(modobj)
# Fit the null model (intercept only)
null_model <- update(modobj, . ~ 1)
logLik_null <- logLik(null_model)
# Calculate R-squared or pseudo R-squared based on the model type
if (family_type == "gaussian") {
# Linear regression: R-squared
r_squared <- summary(modobj)$r.squared
} else {
# For other GLM families: Pseudo R-squared (McFadden)
r_squared <- 1 - (as.numeric(logLik_full) / as.numeric(logLik_null))
}
return(r_squared)
}
## ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## SAVE ENVIRONMENT HERE
save.image('besd_lca3.RData')
besd_cb
cabbages
cb
cb[zd_relevant==1]$name
table1 <- CreateTableOne(vars = c(cllabvars,
cb[zd_relevant==1]$name,
demvarsreg,
'province',
'svyyear'),
strata = 'vxstatus', data = df[c_age_m>11])
table1
CreateTableOne
?CreateTableOne
c(cllabvars,
cb[zd_relevant==1]$name,
demvarsreg,
'province',
'svyyear')
df
